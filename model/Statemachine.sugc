#import "model/Events"
#import "model/States"
#import "model/Transitions"

sugar Statemachine {
	%% Syntax based on:
	%%	   https://github.com/seba--/sugarj/blob/master/case-studies/statemachine/src/statemachine/Metamodel.sugj
	context-free syntax
		Statemachine -> ToplevelDeclaration
		"statemachine" "{" StatemachineBody "}" 		-> Statemachine {cons("Statemachine")}
		InitialState EventsDec* ActionDec* StateDec* 	-> StatemachineBody {cons("StatemachineBody")}
		
    	CIdentifier -> ActionName
    	"action" ActionName CCompoundStm		-> ActionDec {cons("Action")}

		
	desugarings
    	desugar-statemachine

  	rules
  
    desugar-statemachine :
      	Statemachine(body@StatemachineBody(init, eventsDec*, actionDec*, stateDec*)) 
      		-> <conc> ([statesEnum, eventsEnum]
      				  , actions
      				  , [main])
      	
      	with
      		statesId := Id("STATES");
      		eventsId := Id("EVENTS");
      		statesEnum 	:= <desugar-state-decs(|statesId)> 	stateDec*;
      		eventsEnum 	:= <desugar-events-decs(|eventsId)> eventsDec*;
      		actions := <map(desugar-action-dec)> actionDec*;
      		main 	:= <get-main(|statesId, eventsId)> 	body	
      	
      					 	 		 
    desugar-action-dec :
    	Action(name, block)	->	FunDef(
      								DecSpecifierSeq([TypeSpecifier(Int())])
    							  , Declarator(None(), DeclIds(name, None()))
    							  , None()
    							  , block
   							    )				 	 		 	
      					 	 		 
    get-main(|statesId, eventsId) :
    	body@StatemachineBody(init, eventsDec*, actionDec*, stateDec*)	
    				->	FunDef(DecSpecifierSeq([TypeSpecifier(Int())])
    						 , Declarator(None()
      									, DeclParams(Id("main") , params))
    						 , None()
    						 , Block(Some(BlockItems(block-item*))))
    
    	with
    		params := ParamList([ParamDecAbstr(DecSpecifierSeq([TypeSpecifier(Void())]), None())]);	
    		init-dec := <get-init-state-dec(|statesId)> init;
    		loop := <get-main-loop(|eventsId)> body;
    		block-item* := [init-dec, loop]
    		
	
              
    get-main-loop(|eventsId) :
    	StatemachineBody(_, _, _, stateDec*)
    		-> 
    		IterationStm(
                While(cond
                	, Block(Some(BlockItems(
                        [ eventDec
                        , SelectionStm(
                            Switch(
                              Expr([PrimaryExpr(Id("state"))])
                            , Block(Some(BlockItems(case*)))
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
                   
    	with
    		cond := Expr([PrimaryExpr(Lit(IntLit("1")))]);
    		eventDec := <get-next-event(|eventsId)>;
    		case* := <states-to-cases> stateDec*			
                                        
    state-to-case :
    	State(name, trans*)		-> 	
    		CaseDec(name, SelectionStm(
                          Switch(
                            Expr([PrimaryExpr(Id("event"))])
                          , Block(
                              Some(
                                BlockItems(
                                  eventCase*
                                )
                              )
                            )
                          )
                        )
                      )  
    		
    	with
    		eventCase* := <transitions-to-cases> trans*;
    		break := JumpStm(Break())
    		
    trans-to-case :
    	Transition(Event(eventName), stateName)
    		-> CaseDec(eventName, stm*) 
    		
    	with
    		change-state := ExprStm(Some(Expr(
                              [Assign(PrimaryExpr(Id("state"))
                                    , AssignOp()
                                    , PrimaryExpr(stateName))])));  
                               
    		stm* := [change-state]			
    			                                    
    		
	strategies		
	
    get-next-event(|eventsId) =
    				!Dec(
                            DecSpecifierSeq([TypeSpecifier(TypedefName(eventsId))])
                          , Some(
                              InitDeclaratorList(
                                [ InitDeclarator(
                                    Declarator(None(), Id("event"))
                                  , Call(PrimaryExpr(Id("readEvent")), None())
                                  )
                                ]
                              )
                            )
                          )
                          
	states-to-cases =
		mapconcat(state-to-case)
		
	transitions-to-cases =
		mapconcat(trans-to-case)	
	  ;	!(<id>, [LabeledStm(Default(JumpStm(Break())))])
	  ; conc	
	    
	overlays
	
	CaseDec(name, stm) = [LabeledStm(
                             Case(
                               ConstExpr(PrimaryExpr(name))
                             , stm
                             )
                           )
                        , JumpStm(Break())]	    
		                          				 	 		 			 	  		  

}