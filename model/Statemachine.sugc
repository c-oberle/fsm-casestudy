#import "model/Events"
#import "model/States"
#import "model/Transitions"

sugar Statemachine {
	%% Syntax based on:
	%%	   https://github.com/seba--/sugarj/blob/master/case-studies/statemachine/src/statemachine/Metamodel.sugj
	context-free syntax
		Statemachine -> ToplevelDeclaration
		"statemachine" "{" StatemachineBody "}" 		-> Statemachine {cons("Statemachine")}
		InitialState EventsDec* ActionDec* StateDec* 	-> StatemachineBody {cons("StatemachineBody")}
		
    	CIdentifier -> ActionName
    	"action" ActionName CCompoundStm		-> ActionDec {cons("Action")}

		
	desugarings
    	desugar-statemachine

  rules
  
    desugar-statemachine :
      	Statemachine(body@StatemachineBody(init, eventsDec*, actionDec*, stateDec*)) 
      		-> <conc> ([statesEnum, eventsEnum]
      				  , actions
      				  , [main])
      	
      	with
      		statesId := Id("STATES");
      		eventsId := Id("EVENTS");
      		statesEnum 	:= <desugar-state-decs(|statesId)> 	stateDec*;
      		eventsEnum 	:= <desugar-events-decs(|eventsId)> eventsDec*;
      		actions := <map(desugar-action-dec)> actionDec*;
      		main 	:= <get-main(|statesId, eventsId)> 	body	
      	
      					 	 		 
    desugar-action-dec :
    	Action(name, block)	->	FunDef(
      								DecSpecifierSeq([TypeSpecifier(Int())])
    							  , Declarator(None(), DeclIds(name, None()))
    							  , None()
    							  , block
   							    )				 	 		 	
      					 	 		 
    get-main(|statesId, eventsId) :
    	body@StatemachineBody(init, eventsDec*, actionDec*, stateDec*)	
    				->	FunDef(DecSpecifierSeq([ret-type])
    						 , Declarator(None()
      									, DeclParams(Id("main") , params))
    						 , None()
    						 , Block(Some(BlockItems(block-item*))))
    
    	with
    		ret-type :=	TypeSpecifier(Int());
    		params := ParamList([ParamDecAbstr(DecSpecifierSeq([TypeSpecifier(Void())]), None())]);	
    		init-dec := <get-init-state-dec(|statesId)> init;
    		loop := <get-main-loop> body;
    		block-item* := [init-dec, loop]
    		
	
              
    get-main-loop :
    	StatemachineBody(_, eventsDec*, actionDec*, stateDec*)
    		-> 
    		IterationStm(
                While(cond
                	, Block(Some(BlockItems(
                        [ eventDec
                        , SelectionStm(
                            Switch(
                              Expr([PrimaryExpr(Id("state"))])
                            , Block(Some(BlockItems([case*])))
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
                   
    	with
    		cond := Expr([PrimaryExpr(Lit(IntLit("1")))]);
    		eventDec := [];
    		case* := []				 	 		 			 	  		  

}