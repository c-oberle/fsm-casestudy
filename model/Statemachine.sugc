#import "model/Events"
#import "model/States"
#import "model/Transitions"
#import "model/Data"
#import "model/Input"
#import "model/Init"
#import "editor/Editor"

sugar Statemachine {
	%% Syntax based on:
	%%	   https://github.com/seba--/sugarj/blob/master/case-studies/statemachine/
	context-free syntax
		Statemachine -> ToplevelDeclaration
		"statemachine" "{" StatemachineBody "}" -> Statemachine {cons("Statemachine")}
		StatemachineInit EventsDec* StateDec* 	-> StatemachineBody {cons("StatemachineBody")}
		InitialState Data? InitStm? Input		-> StatemachineInit {cons("StatemachineInit")}
		
	desugarings
    	desugar-statemachine

  	rules
  
    desugar-statemachine :
      	Statemachine(body@StatemachineBody(StatemachineInit(_, data, _, input)
      									 , eventsDec*
      									 , stateDec*)) 
      		-> <conc> ([statesEnum, eventsEnum]
      				  , dataDecs
      				  , stateFuns 
      				  , [inputFun, main])
      	
      	with
      		[statesEnum, stateFuns] := <desugar-state-decs> stateDec*;
      		eventsEnum 	:= <desugar-events-decs> eventsDec*;
      		dataDecs := <desugar-data-dec> data;
      		inputFun := <input-to-fun> input;
      		main 	:= <get-main> body	     				 	 		 	
      					 	 		 
    get-main :
    	body@StatemachineBody(StatemachineInit(strt, _, init, _)
    						, eventsDec*
    						, stateDec*)	
    				->	
    					FunDef(DecSpecifierSeq([TypeSpecifier(Int())])
    						 , Declarator(None()
      									, DeclParams(Id("main") , params))
    						 , None()
    						 , StmBlock(block-item*))
    
    	with
    		params := ParamList([ParamDecAbstr(DecSpecifierSeq([TypeSpecifier(Void())])
    										 , None())]);	
    		start-dec := <get-init-state-dec> strt;
    		loop := <get-main-loop> body;
    		init-stm* := <get-init-stms> init;
    		block-item* :=  <conc> (init-stm*, [start-dec, loop])   		
              
    get-main-loop :
    	StatemachineBody(_, _, stateDec*)
    		-> 
    		IterationStm(
                While(cond
                	, StmBlock(
                        [ eventDec
                        , SelectionStm(
                            Switch(
                              Expr([PrimaryExpr(Id("state"))])
                            , Block(Some(BlockItems(case*)))
                            )
                          )
                        ]
                      )
                    )
                  )
                   
    	with
    		cond := Expr([PrimaryExpr(Lit(IntLit("1")))]);
    		eventDec := <get-next-event>;
    		case* := <states-to-cases> stateDec*			
                                        
    state-to-case :
    	State(name, StateBody(_, _, trans*))		
    		-> 	
    		CaseDec(name, SelectionStm(
                          Switch(
                            Expr([PrimaryExpr(Id("event"))])
                          , Block(
                              Some(
                                BlockItems(
                                  eventCase*
                                )
                              )
                            )
                          )
                        )
                      )  
    		
    	with
    		eventCase* := <transitions-to-cases(|name)> trans*;
    		break := JumpStm(Break())
    		
    trans-to-case(|fromState) :
    	Transition(Event(eventName), toState)
    		-> CaseDec(eventName
    				 , StmBlock([exit, change-state, entry])) 
    		
    	with
    		change-state := ExprStm(Some(Expr(
                              [Assign(PrimaryExpr(Id("state"))
                                    , AssignOp()
                                    , PrimaryExpr(toState))]))); 
            
    		exitId 	:= <get-exit-fun-id> fromState;
    		entryId := <get-entry-fun-id> toState;
    		exit  := CallStm(exitId);
    		entry := CallStm(entryId)				
    			                                    
    		
	strategies	
	
    get-next-event =
    				!Dec(
                            DecSpecifierSeq([TypeSpecifier(TypedefName(<events-id>))])
                          , Some(
                              InitDeclaratorList(
                                [ InitDeclarator(
                                    Declarator(None(), Id("event"))
                                  , Call(PrimaryExpr(<input-id>), None())
                                  )
                                ]
                              )
                            )
                          )
                          
	states-to-cases =
		mapconcat(state-to-case)
		
	transitions-to-cases(|exit) =
		mapconcat(trans-to-case(|exit))	
	  ;	!(<id>, [LabeledStm(Default(JumpStm(Break())))])
	  ; conc	
	    
	overlays
	
	CaseDec(name, stm) = [LabeledStm(
                             Case(
                               ConstExpr(PrimaryExpr(name))
                             , stm
                             )
                           )
                        , JumpStm(Break())]
                          
    StmBlock(stms) = Block(Some(BlockItems(stms)))	 
    
    CallStm(fun) = ExprStm(
                	Some(Expr([Call(PrimaryExpr(fun), None())]))
              	   )                         				 	 		 			 	  		  

}