// based on http://stackoverflow.com/questions/1371460/state-machines-tutorials

int entry_state(void) { return 0; }
int foo_state(void) { return 1; }
int bar_state(void) { return 2; }
int end_state(void) { return 3; }

/* array and enum below must be in sync! */
int (* state[])(void) = { entry_state, foo_state, bar_state, end_state};
enum state_codes { entry, foo, bar, end};

enum ret_codes { ok, fail, repeat};
struct transition {
    enum state_codes src_state;
    enum ret_codes   ret_code;
    enum state_codes dst_state;
};
/* transitions from end state aren't needed */
struct transition state_transitions[] = {
    {entry, ok,     foo},
    {entry, fail,   end},
    {foo,   ok,     bar},
    {foo,   fail,   end},
    {foo,   repeat, foo},
    {bar,   ok,     end},
    {bar,   fail,   end},
    {bar,   repeat, foo}};

enum state_codes lookup_transitions(enum state_codes cur_state, enum ret_codes rc) {
	
}

int main(int argc, char *argv[]) {
    enum state_codes cur_state = entry;
    enum ret_codes rc = fail;
    int (* state_fun)(void);

    while(cur_state != end) {
        state_fun = state[cur_state];
        rc = state_fun();
        cur_state = lookup_transitions(cur_state, rc);
    }

    return 0;
}